package com.blog.serviceImpl;

import com.blog.entity.Post;
import com.blog.exception.ResourceNotFoundException;
import com.blog.payload.PostDto;
import com.blog.repository.PostRepository;
import com.blog.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class PostServiceImpl implements PostService {

    @Autowired
    private PostRepository postRepository;

    @Override
    public PostDto createPost(PostDto postDto) {

        Post post = new Post();
        post.setTitle(postDto.getTitle());
        post.setContent(postDto.getContent());
        post.setDescription(postDto.getDescription());

        Post savedPost = postRepository.save(post);

        PostDto dto = new PostDto();
        dto.setId(savedPost.getId());
        dto.setTitle(savedPost.getTitle());
        dto.setContent(savedPost.getContent());
        dto.setDescription(savedPost.getDescription());
//        dto.setMessage("Post is created");

        return dto;

    }

    @Override
    public void deletePostByPostId(long postId) {
        Post post = postRepository.findById(postId).orElseThrow(
                () -> new ResourceNotFoundException("Post not found with the  postId:" + postId)
        );

        postRepository.deleteById(postId);

    }

    @Override
    public PostDto updatePostByPostId(long postId , PostDto postDto) {
        Optional<Post> byId = postRepository.findById(postId);
        Post post = byId.get();
                                                           // we do not do post.setId() bcz it is autogenerated and is not sent by the json object

        post.setTitle(postDto.getTitle());
        post.setContent(postDto.getContent());
        post.setDescription(postDto.getDescription());

        Post savedPost = postRepository.save(post);

        PostDto dto  = new PostDto();
        dto.setId(savedPost.getId());
        dto.setTitle(savedPost.getTitle());
        dto.setContent(savedPost.getContent());
        dto.setDescription(savedPost.getDescription());

        return dto;
    }

    @Override
    public List<PostDto> getAllPosts() {
        List<Post> allPosts = postRepository.findAll();
        List<PostDto> dtos = allPosts.stream().map(p -> mapToDto(p)).collect(Collectors.toList());
         return dtos;
    }

   PostDto mapToDto ( Post post){
        PostDto dto = new PostDto();
        dto.setId(post.getId());
        dto.setTitle(post.getTitle());
        dto.setContent(post.getContent());
        dto.setDescription(post.getDescription());

        return dto;
   }

   Post mapToEntity(PostDto postDto){
        Post post = new Post();

        post.setTitle(postDto.getTitle());
        post.setContent(postDto.getContent());
        post.setDescription(postDto.getDescription());

        return post;

   }

    @Override
    public PostDto getPostById(long postId) {
        Post post = postRepository.findById(postId).orElseThrow(null);
//        Post post = postRepository.findById(postId).get();
        PostDto dto = mapToDto(post);
        return  dto;
    }






    @Override
    public List<PostDto> getAllPostsPagenation(int pageNo, int pageSize, String sortBy, String sortDir) {

        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name())?Sort.by(sortBy).ascending():Sort.by(sortBy).descending();
        Pageable pageable =    PageRequest.of(pageNo, pageSize, sort);



        Page<Post> pagePosts = postRepository.findAll(pageable);
        List<Post> allPosts = pagePosts.getContent();

        List<PostDto> dtos = allPosts.stream().map(p -> mapToDto(p)).collect(Collectors.toList());
        return dtos;


    }
}
